package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.Bool;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff1660e01b8152600401620000ae9062000214565b602060405180830381600087803b158015620000c957600080fd5b505af1158015620000de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000104919062000122565b5062000295565b6000815190506200011c816200027b565b92915050565b6000602082840312156200013557600080fd5b600062000145848285016200010b565b91505092915050565b60006200015d600b8362000260565b91507f61737365745f76616c75650000000000000000000000000000000000000000006000830152602082019050919050565b60006200019f60078362000260565b91507f6163636f756e74000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000620001e160078362000260565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526200022f81620001d2565b90508181036020830152620002448162000190565b9050818103604083015262000259816200014e565b9050919050565b600082825260208201905092915050565b6000819050919050565b620002868162000271565b81146200029257600080fd5b50565b6119d980620002a56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639b80b05014610046578063ea87152b14610076578063fcd7e3c1146100a6575b600080fd5b610060600480360381019061005b91906111d1565b6100d7565b60405161006d9190611611565b60405180910390f35b610090600480360381019061008b9190611250565b61084d565b60405161009d9190611611565b60405180910390f35b6100c060048036038101906100bb9190611190565b610ad6565b6040516100ce9291906115e8565b60405180910390f35b60008060019050600080905060008090506100f187610ad6565b809350819450505060011515831515146101b457848660405161011491906115d1565b60405180910390208860405161012a91906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040516101819190611647565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050610846565b6101bd86610ad6565b809250819450505060011515831515146102805784866040516101e091906115d1565b6040518091039020886040516101f691906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60405161024d9190611662565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350505050610846565b8482101561033757848660405161029791906115d1565b6040518091039020886040516102ad91906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd604051610304919061167d565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9350505050610846565b8085820110156103f057848660405161035091906115d1565b60405180910390208860405161036691906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040516103bd9190611698565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9350505050610846565b60606103fd868403610bd4565b9050610407610ebf565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff8111801561046d57600080fd5b506040519080825280602002602001820160405280156104a757816020015b610494610ebf565b81526020019060019003908161048c5790505b50905081816000815181106104b857fe5b60200260200101819052506104cb610ed9565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288d846040518363ffffffff1660e01b815260040161053a929190611723565b602060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190611167565b90506001811461064a57898b6040516105a591906115d1565b60405180910390208d6040516105bb91906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60405161061291906116b3565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb98505050505050505050610846565b60606106578b8801610bd4565b905060405180604001604052806040518060400160405280600b81526020017f61737365745f76616c75650000000000000000000000000000000000000000008152508152602001828152509450600167ffffffffffffffff811180156106bd57600080fd5b506040519080825280602002602001820160405280156106f757816020015b6106e4610ebf565b8152602001906001900390816106dc5790505b509350848460008151811061070857fe5b602002602001018190525060405180602001604052808581525092506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288d856040518363ffffffff1660e01b8152600401610780929190611723565b602060405180830381600087803b15801561079a57600080fd5b505af11580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190611167565b508a8c6040516107e291906115d1565b60405180910390208e6040516107f891906115d1565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd6000604051610830919061162c565b60405180910390a4600099505050505050505050505b9392505050565b60008060009050600060019050600080905061086886610ad6565b80925081935050506001151582151514610a5857606061088786610bd4565b9050610891610ebf565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff811180156108f757600080fd5b5060405190808252806020026020018201604052801561093157816020015b61091e610ebf565b8152602001906001900390816109165790505b509050818160008151811061094257fe5b6020026020010181905250610955610ed9565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84288c846040518363ffffffff1660e01b81526004016109c4929190611723565b602060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190611167565b90506001811415610a2a5760009750610a4e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97505b5050505050610a7c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b8486604051610a8b91906115d1565b60405180910390207f91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d85604051610ac29190611611565b60405180910390a382935050505092915050565b600080610ae1610ed9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e10510b866040518263ffffffff1660e01b8152600401610b3d91906116ee565b60006040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b929190611113565b80935081925050506000809050610bc48360000151600081518110610bb357fe5b602002602001015160200151610d18565b9050818194509450505050915091565b60606000821415610c1c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610d13565b600082905060005b60008214610c46578080600101915050600a8281610c3e57fe5b049150610c24565b60608167ffffffffffffffff81118015610c5f57600080fd5b506040519080825280601f01601f191660200182016040528015610c925781602001600182028036833780820191505090505b50905060006001830390505b60008614610d0b57600a8681610cb057fe5b0660300160f81b82828060019003935081518110610cca57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681610d0357fe5b049550610c9e565b819450505050505b919050565b6000610d25826000610d2c565b9050919050565b600060608390506000809050600080905060008090505b8351811015610ea0576030848281518110610d5a57fe5b","602001015160f81c60f81b60f81c60ff1610158015610d9657506039848281518110610d8257fe5b602001015160f81c60f81b60f81c60ff1611155b15610de8578115610db9576000861415610daf57610ea0565b8580600190039650505b600a830292506030848281518110610dcd57fe5b602001015160f81c60f81b60f81c60ff160383019250610e93565b602e848281518110610df657fe5b602001015160f81c60f81b60f81c60ff161415610e57578115610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e459061176d565b60405180910390fd5b60019150610e92565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e89906116ce565b60405180910390fd5b5b8080600101915050610d43565b506000851115610eb35784600a0a820291505b81935050505092915050565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b600082601f830112610efd57600080fd5b8151610f10610f0b826117ba565b61178d565b9150818183526020840193506020810190508360005b83811015610f565781518601610f3c8882611082565b845260208401935060208301925050600181019050610f26565b5050505092915050565b600081519050610f6f8161195e565b92915050565b600081519050610f8481611975565b92915050565b600082601f830112610f9b57600080fd5b8135610fae610fa9826117e2565b61178d565b91508082526020830160208301858383011115610fca57600080fd5b610fd583828461190b565b50505092915050565b600082601f830112610fef57600080fd5b8151611002610ffd826117e2565b61178d565b9150808252602083016020830185838301111561101e57600080fd5b61102983828461191a565b50505092915050565b60006020828403121561104457600080fd5b61104e602061178d565b9050600082015167ffffffffffffffff81111561106a57600080fd5b61107684828501610eec565b60008301525092915050565b60006040828403121561109457600080fd5b61109e604061178d565b9050600082015167ffffffffffffffff8111156110ba57600080fd5b6110c684828501610fde565b600083015250602082015167ffffffffffffffff8111156110e657600080fd5b6110f284828501610fde565b60208301525092915050565b60008135905061110d8161198c565b92915050565b6000806040838503121561112657600080fd5b600061113485828601610f60565b925050602083015167ffffffffffffffff81111561115157600080fd5b61115d85828601611032565b9150509250929050565b60006020828403121561117957600080fd5b600061118784828501610f75565b91505092915050565b6000602082840312156111a257600080fd5b600082013567ffffffffffffffff8111156111bc57600080fd5b6111c884828501610f8a565b91505092915050565b6000806000606084860312156111e657600080fd5b600084013567ffffffffffffffff81111561120057600080fd5b61120c86828701610f8a565b935050602084013567ffffffffffffffff81111561122957600080fd5b61123586828701610f8a565b9250506040611246868287016110fe565b9150509250925092565b6000806040838503121561126357600080fd5b600083013567ffffffffffffffff81111561127d57600080fd5b61128985828601610f8a565b925050602061129a858286016110fe565b9150509250929050565b60006112b0838361157e565b905092915050565b60006112c38261181e565b6112cd8185611841565b9350836020820285016112df8561180e565b8060005b8581101561131b57848403895281516112fc85826112a4565b945061130783611834565b925060208a019950506001810190506112e3565b50829750879550505050505092915050565b6113368161187f565b82525050565b6113458161188b565b82525050565b6113548161189f565b82525050565b611363816118b1565b82525050565b611372816118c3565b82525050565b611381816118d5565b82525050565b611390816118e7565b82525050565b61139f816118f9565b82525050565b60006113b082611829565b6113ba8185611852565b93506113ca81856020860161191a565b6113d38161194d565b840191505092915050565b60006113e982611829565b6113f38185611863565b935061140381856020860161191a565b61140c8161194d565b840191505092915050565b600061142282611829565b61142c8185611874565b935061143c81856020860161191a565b80840191505092915050565b6000611455602c83611863565b91507f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b60006114bb600783611863565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006114fb602c83611863565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000602083016000830151848203600086015261157182826112b8565b9150508091505092915050565b6000604083016000830151848203600086015261159b82826113a5565b915050602083015184820360208601526115b582826113a5565b9150508091505092915050565b6115cb81611895565b82525050565b60006115dd8284611417565b915081905092915050565b60006040820190506115fd600083018561132d565b61160a60208301846115c2565b9392505050565b6000602082019050611626600083018461133c565b92915050565b6000602082019050611641600083018461134b565b92915050565b600060208201905061165c600083018461135a565b92915050565b60006020820190506116776000830184611369565b92915050565b60006020820190506116926000830184611378565b92915050565b60006020820190506116ad6000830184611387565b92915050565b60006020820190506116c86000830184611396565b92915050565b600060208201905081810360008301526116e781611448565b9050919050565b60006040820190508181036000830152611707816114ae565b9050818103602083015261171b81846113de565b905092915050565b6000606082019050818103600083015261173c816114ae565b9050818103602083015261175081856113de565b905081810360408301526117648184611554565b90509392505050565b60006020820190508181036000830152611786816114ee565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156117b057600080fd5b8060405250919050565b600067ffffffffffffffff8211156117d157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117f957600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006118aa8261188b565b9050919050565b60006118bc8261188b565b9050919050565b60006118ce8261188b565b9050919050565b60006118e08261188b565b9050919050565b60006118f28261188b565b9050919050565b60006119048261188b565b9050919050565b82818337600083830152505050565b60005b8381101561193857808201518184015260208101905061191d565b83811115611947576000848401525b50505050565b6000601f19601f8301169050919050565b6119678161187f565b811461197257600080fd5b50565b61197e8161188b565b811461198957600080fd5b50565b61199581611895565b81146119a057600080fd5b5056fea2646970667358221220db244f3a504a743a9f34d720915e9888ad99d2f1d9383234fa86f59910e3b04b64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff1660e01b8152600401620000ae9062000214565b602060405180830381600087803b158015620000c957600080fd5b505af1158015620000de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000104919062000122565b5062000295565b6000815190506200011c816200027b565b92915050565b6000602082840312156200013557600080fd5b600062000145848285016200010b565b91505092915050565b60006200015d600b8362000260565b91507f61737365745f76616c75650000000000000000000000000000000000000000006000830152602082019050919050565b60006200019f60078362000260565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000620001e160078362000260565b91507f6163636f756e74000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526200022f8162000190565b905081810360208301526200024481620001d2565b9050818103604083015262000259816200014e565b9050919050565b600082825260208201905092915050565b6000819050919050565b620002868162000271565b81146200029257600080fd5b50565b6119d980620002a56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635b325d7814610046578063612d2bff14610077578063b433c7ca146100a7575b600080fd5b610060600480360381019061005b9190611190565b6100d7565b60405161006e9291906115e8565b60405180910390f35b610091600480360381019061008c91906111d1565b6101d5565b60405161009e9190611611565b60405180910390f35b6100c160048036038101906100bc9190611250565b61094b565b6040516100ce9190611611565b60405180910390f35b6000806100e2610ebf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcce5531866040518263ffffffff1660e01b815260040161013e91906116ce565b60006040518083038186803b15801561015657600080fd5b505afa15801561016a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101939190611113565b809350819250505060008090506101c583600001516000815181106101b457fe5b602002602001015160200151610bd4565b9050818194509450505050915091565b60008060019050600080905060008090506101ef876100d7565b809350819450505060011515831515146102b257848660405161021291906115d1565b60405180910390208860405161022891906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405161027f9190611647565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050610944565b6102bb866100d7565b8092508194505050600115158315151461037e5784866040516102de91906115d1565b6040518091039020886040516102f491906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60405161034b9190611662565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350505050610944565b8482101561043557848660405161039591906115d1565b6040518091039020886040516103ab91906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd604051610402919061167d565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9350505050610944565b8085820110156104ee57848660405161044e91906115d1565b60405180910390208860405161046491906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040516104bb9190611698565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9350505050610944565b60606104fb868403610be8565b9050610505610ed2565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff8111801561056b57600080fd5b506040519080825280602002602001820160405280156105a557816020015b610592610ed2565b81526020019060019003908161058a5790505b50905081816000815181106105b657fe5b60200260200101819052506105c9610ebf565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af5081748d846040518363ffffffff1660e01b8152600401610638929190611703565b602060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190611167565b90506001811461074857898b6040516106a391906115d1565b60405180910390208d6040516106b991906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60405161071091906116b3565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb98505050505050505050610944565b60606107558b8801610be8565b905060405180604001604052806040518060400160405280600b81526020017f61737365745f76616c75650000000000000000000000000000000000000000008152508152602001828152509450600167ffffffffffffffff811180156107bb57600080fd5b506040519080825280602002602001820160405280156107f557816020015b6107e2610ed2565b8152602001906001900390816107da5790505b509350848460008151811061080657fe5b602002602001018190525060405180602001604052808581525092506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af5081748d856040518363ffffffff1660e01b815260040161087e929190611703565b602060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190611167565b508a8c6040516108e091906115d1565b60405180910390208e6040516108f691906115d1565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c600060405161092e919061162c565b60405180910390a4600099505050505050505050505b9392505050565b600080600090506000600190506000809050610966866100d7565b80925081935050506001151582151514610b5657606061098586610be8565b905061098f610ed2565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff811180156109f557600080fd5b50604051908082528060200260200182016040528015610a2f57816020015b610a1c610ed2565b815260200190600190039081610a145790505b5090508181600081518110610a4057fe5b6020026020010181905250610a53610ebf565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af5081748c846040518363ffffffff1660e01b8152600401610ac2929190611703565b602060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190611167565b90506001811415610b285760009750610b4c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97505b5050505050610b7a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b8486604051610b8991906115d1565b60405180910390207f7ac7a04970319ae8fc5b92fe177d000fee3c00c92f8e78aae13d6571f17c351f85604051610bc09190611611565b60405180910390a382935050505092915050565b6000610be1826000610d2c565b9050919050565b60606000821415610c30576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610d27565b600082905060005b60008214610c5a578080600101915050600a8281610c5257fe5b049150610c38565b60608167ffffffffffffffff81118015610c7357600080fd5b506040519080825280601f01601f191660200182016040528015610ca65781602001600182028036833780820191505090505b50905060006001830390505b60008614610d1f57600a8681610cc457fe5b0660300160f81b82828060019003935081518110610cde57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681610d1757fe5b049550610cb2565b819450505050505b919050565b600060608390506000809050600080905060008090505b8351811015610ea0576030848281518110610d5a57fe5b","602001015160f81c60f81b60f81c60ff1610158015610d9657506039848281518110610d8257fe5b602001015160f81c60f81b60f81c60ff1611155b15610de8578115610db9576000861415610daf57610ea0565b8580600190039650505b600a830292506030848281518110610dcd57fe5b602001015160f81c60f81b60f81c60ff160383019250610e93565b602e848281518110610df657fe5b602001015160f81c60f81b60f81c60ff161415610e57578115610e4e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e459061176d565b60405180910390fd5b60019150610e92565b6040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e899061174d565b60405180910390fd5b5b8080600101915050610d43565b506000851115610eb35784600a0a820291505b81935050505092915050565b6040518060200160405280606081525090565b604051806040016040528060608152602001606081525090565b600082601f830112610efd57600080fd5b8151610f10610f0b826117ba565b61178d565b9150818183526020840193506020810190508360005b83811015610f565781518601610f3c8882611082565b845260208401935060208301925050600181019050610f26565b5050505092915050565b600081519050610f6f8161195e565b92915050565b600081519050610f8481611975565b92915050565b600082601f830112610f9b57600080fd5b8135610fae610fa9826117e2565b61178d565b91508082526020830160208301858383011115610fca57600080fd5b610fd583828461190b565b50505092915050565b600082601f830112610fef57600080fd5b8151611002610ffd826117e2565b61178d565b9150808252602083016020830185838301111561101e57600080fd5b61102983828461191a565b50505092915050565b60006020828403121561104457600080fd5b61104e602061178d565b9050600082015167ffffffffffffffff81111561106a57600080fd5b61107684828501610eec565b60008301525092915050565b60006040828403121561109457600080fd5b61109e604061178d565b9050600082015167ffffffffffffffff8111156110ba57600080fd5b6110c684828501610fde565b600083015250602082015167ffffffffffffffff8111156110e657600080fd5b6110f284828501610fde565b60208301525092915050565b60008135905061110d8161198c565b92915050565b6000806040838503121561112657600080fd5b600061113485828601610f60565b925050602083015167ffffffffffffffff81111561115157600080fd5b61115d85828601611032565b9150509250929050565b60006020828403121561117957600080fd5b600061118784828501610f75565b91505092915050565b6000602082840312156111a257600080fd5b600082013567ffffffffffffffff8111156111bc57600080fd5b6111c884828501610f8a565b91505092915050565b6000806000606084860312156111e657600080fd5b600084013567ffffffffffffffff81111561120057600080fd5b61120c86828701610f8a565b935050602084013567ffffffffffffffff81111561122957600080fd5b61123586828701610f8a565b9250506040611246868287016110fe565b9150509250925092565b6000806040838503121561126357600080fd5b600083013567ffffffffffffffff81111561127d57600080fd5b61128985828601610f8a565b925050602061129a858286016110fe565b9150509250929050565b60006112b0838361157e565b905092915050565b60006112c38261181e565b6112cd8185611841565b9350836020820285016112df8561180e565b8060005b8581101561131b57848403895281516112fc85826112a4565b945061130783611834565b925060208a019950506001810190506112e3565b50829750879550505050505092915050565b6113368161187f565b82525050565b6113458161188b565b82525050565b6113548161189f565b82525050565b611363816118b1565b82525050565b611372816118c3565b82525050565b611381816118d5565b82525050565b611390816118e7565b82525050565b61139f816118f9565b82525050565b60006113b082611829565b6113ba8185611852565b93506113ca81856020860161191a565b6113d38161194d565b840191505092915050565b60006113e982611829565b6113f38185611863565b935061140381856020860161191a565b61140c8161194d565b840191505092915050565b600061142282611829565b61142c8185611874565b935061143c81856020860161191a565b80840191505092915050565b6000611455600783611863565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000611495602c83611863565b91507f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b60006114fb602c83611863565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000602083016000830151848203600086015261157182826112b8565b9150508091505092915050565b6000604083016000830151848203600086015261159b82826113a5565b915050602083015184820360208601526115b582826113a5565b9150508091505092915050565b6115cb81611895565b82525050565b60006115dd8284611417565b915081905092915050565b60006040820190506115fd600083018561132d565b61160a60208301846115c2565b9392505050565b6000602082019050611626600083018461133c565b92915050565b6000602082019050611641600083018461134b565b92915050565b600060208201905061165c600083018461135a565b92915050565b60006020820190506116776000830184611369565b92915050565b60006020820190506116926000830184611378565b92915050565b60006020820190506116ad6000830184611387565b92915050565b60006020820190506116c86000830184611396565b92915050565b600060408201905081810360008301526116e781611448565b905081810360208301526116fb81846113de565b905092915050565b6000606082019050818103600083015261171c81611448565b9050818103602083015261173081856113de565b905081810360408301526117448184611554565b90509392505050565b6000602082019050818103600083015261176681611488565b9050919050565b60006020820190508181036000830152611786816114ee565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156117b057600080fd5b8060405250919050565b600067ffffffffffffffff8211156117d157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117f957600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006118aa8261188b565b9050919050565b60006118bc8261188b565b9050919050565b60006118ce8261188b565b9050919050565b60006118e08261188b565b9050919050565b60006118f28261188b565b9050919050565b60006119048261188b565b9050919050565b82818337600083830152505050565b60005b8381101561193857808201518184015260208101905061191d565b83811115611947576000848401525b50505050565b6000601f19601f8301169050919050565b6119678161187f565b811461197257600080fd5b50565b61197e8161188b565b811461198957600080fd5b50565b61199581611895565b81146119a057600080fd5b5056fea264697066735822122016acf4587b1ba061c8b7ecf711f457d4886d61e96fbfc298aa098c1c1ed89e5664736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventEventResponse> getTransferEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from_account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to_account = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String from_account, String to_account, BigInteger amount,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] account;

        public BigInteger asset_value;

        public BigInteger ret;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] from_account;

        public byte[] to_account;

        public BigInteger amount;

        public BigInteger ret;
    }
}
