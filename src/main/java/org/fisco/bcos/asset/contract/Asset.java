package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff1660e01b8152600401620000ae9062000214565b602060405180830381600087803b158015620000c957600080fd5b505af1158015620000de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000104919062000122565b5062000295565b6000815190506200011c816200027b565b92915050565b6000602082840312156200013557600080fd5b600062000145848285016200010b565b91505092915050565b60006200015d600b8362000260565b91507f61737365745f76616c75650000000000000000000000000000000000000000006000830152602082019050919050565b60006200019f60078362000260565b91507f6163636f756e74000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000620001e160078362000260565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526200022f81620001d2565b90508181036020830152620002448162000190565b9050818103604083015262000259816200014e565b9050919050565b600082825260208201905092915050565b6000819050919050565b620002868162000271565b81146200029257600080fd5b50565b611ebf80620002a56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639b80b05014610046578063ea87152b14610076578063fcd7e3c1146100a6575b600080fd5b610060600480360381019061005b9190611541565b6100d7565b60405161006d9190611a29565b60405180910390f35b610090600480360381019061008b91906115c0565b61099a565b60405161009d9190611a29565b60405180910390f35b6100c060048036038101906100bb9190611500565b610c8a565b6040516100ce929190611a44565b60405180910390f35b60008060009050600080905060008090506100f187610c8a565b8093508194505050600083146101b05784866040516101109190611a12565b6040518091039020886040516101269190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405161017d9190611a88565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050610993565b6101b986610c8a565b8092508194505050600083146102785784866040516101d89190611a12565b6040518091039020886040516101ee9190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040516102459190611aa3565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350505050610993565b8482101561032f57848660405161028f9190611a12565b6040518091039020886040516102a59190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6040516102fc9190611abe565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9350505050610993565b8085820110156103e85784866040516103489190611a12565b60405180910390208860405161035e9190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040516103b59190611ad9565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9350505050610993565b60606103f5868403610eb9565b90506103ff6111a4565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff8111801561046557600080fd5b5060405190808252806020026020018201604052801561049f57816020015b61048c6111a4565b8152602001906001900390816104845790505b50905081816000815181106104b057fe5b60200260200101819052506104c36111be565b60405180602001604052808381525090506104dc6111d1565b600167ffffffffffffffff811180156104f457600080fd5b5060405190808252806020026020018201604052801561052e57816020015b61051b6111e4565b8152602001906001900390816105135790505b50816000018190525060405180606001604052806040518060400160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525081526020018d81526020016000600581111561059057fe5b81525081600001516000815181106105a457fe5b602002602001018190525060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351c97b5b84846040518363ffffffff1660e01b815260040161060d929190611b99565b602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906114d7565b90506001811461071e578a8c6040516106789190611a12565b60405180910390208e60405161068e9190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb6040516106e59190611af4565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9950505050505050505050610993565b606061072b8c8901610eb9565b905060405180604001604052806040518060400160405280600b81526020017f61737365745f76616c75650000000000000000000000000000000000000000008152508152602001828152509550600167ffffffffffffffff8111801561079157600080fd5b506040519080825280602002602001820160405280156107cb57816020015b6107b86111a4565b8152602001906001900390816107b05790505b50945085856000815181106107dc57fe5b6020026020010181905250604051806020016040528086815250935060405180606001604052806040518060400160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525081526020018e81526020016000600581111561085157fe5b815250836000015160008151811061086557fe5b60200260200101819052506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351c97b5b85856040518363ffffffff1660e01b81526004016108cc929190611b99565b602060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906114d7565b508b8d60405161092e9190611a12565b60405180910390208f6040516109449190611a12565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd600060405161097c9190611a6d565b60405180910390a460009a50505050505050505050505b9392505050565b60008060009050600080905060008090506109b486610c8a565b809250819350505060008214610c0c5760606109cf86610eb9565b90506109d96111a4565b60405180604001604052806040518060400160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152508152602001898152509050610a2d6111a4565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018481525090506060600267ffffffffffffffff81118015610a9357600080fd5b50604051908082528060200260200182016040528015610acd57816020015b610aba6111a4565b815260200190600190039081610ab25790505b5090508281600081518110610ade57fe5b60200260200101819052508181600181518110610af757fe5b6020026020010181905250610b0a6111be565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b5c585f836040518263ffffffff1660e01b8152600401610b779190611b64565b602060405180830381600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906114d7565b90506001811415610bdd5760009850610c01565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe98505b505050505050610c30565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b8486604051610c3f9190611a12565b60405180910390207f91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d85604051610c769190611a29565b60405180910390a382935050505092915050565b600080610c956111e4565b60405180606001604052806040518060400160405280600781526020017f6163636f756e7400000000000000000000000000000000000000000000000000815250815260200185815260200160006005811115610cee57fe5b81525090506060600167ffffffffffffffff81118015610d0d57600080fd5b50604051908082528060200260200182016040528015610d4757816020015b610d346111e4565b815260200190600190039081610d2c5790505b5090508181600081518110610d5857fe5b6020","","50611d6482611e4e565b919050565b6000819050919050565b6000819050919050565b6000611d8882611d56565b9050919050565b6000611d9a82611d69565b9050919050565b6000611dac82611d69565b9050919050565b6000611dbe82611d69565b9050919050565b6000611dd082611d69565b9050919050565b6000611de282611d69565b9050919050565b6000611df482611d69565b9050919050565b82818337600083830152505050565b60005b83811015611e28578082015181840152602081019050611e0d565b83811115611e37576000848401525b50505050565b6000601f19601f8301169050919050565b60068110611e5857fe5b50565b611e6481611d69565b8114611e6f57600080fd5b50565b611e7b81611d73565b8114611e8657600080fd5b5056fea2646970667358221220589d6c503edf14694813116218a9b41ac5b825c37e541a31bcd8f37f63d040af64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff1660e01b8152600401620000ae9062000214565b602060405180830381600087803b158015620000c957600080fd5b505af1158015620000de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000104919062000122565b5062000295565b6000815190506200011c816200027b565b92915050565b6000602082840312156200013557600080fd5b600062000145848285016200010b565b91505092915050565b60006200015d600b8362000260565b91507f61737365745f76616c75650000000000000000000000000000000000000000006000830152602082019050919050565b60006200019f60078362000260565b91507f745f6173736574000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000620001e160078362000260565b91507f6163636f756e74000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526200022f8162000190565b905081810360208301526200024481620001d2565b9050818103604083015262000259816200014e565b9050919050565b600082825260208201905092915050565b6000819050919050565b620002868162000271565b81146200029257600080fd5b50565b611ebf80620002a56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635b325d7814610046578063612d2bff14610077578063b433c7ca146100a7575b600080fd5b610060600480360381019061005b9190611500565b6100d7565b60405161006e929190611a44565b60405180910390f35b610091600480360381019061008c9190611541565b610306565b60405161009e9190611a29565b60405180910390f35b6100c160048036038101906100bc91906115c0565b610bc9565b6040516100ce9190611a29565b60405180910390f35b6000806100e26111a4565b60405180606001604052806040518060400160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525081526020018581526020016000600581111561013b57fe5b81525090506060600167ffffffffffffffff8111801561015a57600080fd5b5060405190808252806020026020018201604052801561019457816020015b6101816111a4565b8152602001906001900390816101795790505b50905081816000815181106101a557fe5b60200260200101819052506101b86111d0565b81816000018190525060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663575b6541836040518263ffffffff1660e01b815260040161021d9190611b0f565b60006040518083038186803b15801561023557600080fd5b505afa158015610249573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102729190611496565b905060008090508151600014156102b6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81819150965096505050505050610301565b6102ef826000815181106102c657fe5b6020026020010151600001516000815181106102de57fe5b602002602001015160200151610eb9565b90506000818191509650965050505050505b915091565b6000806000905060008090506000809050610320876100d7565b8093508194505050600083146103df57848660405161033f9190611a12565b6040518091039020886040516103559190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040516103ac9190611a88565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050610bc2565b6103e8866100d7565b8092508194505050600083146104a75784866040516104079190611a12565b60405180910390208860405161041d9190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040516104749190611aa3565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350505050610bc2565b8482101561055e5784866040516104be9190611a12565b6040518091039020886040516104d49190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60405161052b9190611abe565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9350505050610bc2565b8085820110156106175784866040516105779190611a12565b60405180910390208860405161058d9190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040516105e49190611ad9565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9350505050610bc2565b6060610624868403610ecd565b905061062e6111e3565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018381525090506060600167ffffffffffffffff8111801561069457600080fd5b506040519080825280602002602001820160405280156106ce57816020015b6106bb6111e3565b8152602001906001900390816106b35790505b50905081816000815181106106df57fe5b60200260200101819052506106f26111fd565b604051806020016040528083815250905061070b6111d0565b600167ffffffffffffffff8111801561072357600080fd5b5060405190808252806020026020018201604052801561075d57816020015b61074a6111a4565b8152602001906001900390816107425790505b50816000018190525060405180606001604052806040518060400160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525081526020018d8152602001600060058111156107bf57fe5b81525081600001516000815181106107d357fe5b602002602001018190525060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f6c939384846040518363ffffffff1660e01b815260040161083c929190611b79565b602060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e91906114d7565b90506001811461094d578a8c6040516108a79190611a12565b60405180910390208e6040516108bd9190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb6040516109149190611af4565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9950505050505050505050610bc2565b606061095a8c8901610ecd565b905060405180604001604052806040518060400160405280600b81526020017f61737365745f76616c75650000000000000000000000000000000000000000008152508152602001828152509550600167ffffffffffffffff811180156109c057600080fd5b506040519080825280602002602001820160405280156109fa57816020015b6109e76111e3565b8152602001906001900390816109df5790505b5094508585600081518110610a0b57fe5b6020026020010181905250604051806020016040528086815250935060405180606001604052806040518060400160405280600781526020017f6163636f756e740000000000000000000000000000000000000000000000000081525081526020018e815260200160006005811115610a8057fe5b8152508360000151600081518110610a9457fe5b60200260200101819052506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f6c939385856040518363ffffffff1660e01b8152600401610afb929190611b79565b602060405180830381600087803b158015610b1557600080fd5b505af1158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d91906114d7565b508b8d604051610b5d9190611a12565b60405180910390208f604051610b739190611a12565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c6000604051610bab9190611a6d565b60405180910390a460009a50505050505050505050505b9392505050565b6000806000905060008090506000809050610be3866100d7565b809250819350505060008214610e3b576060610bfe86610ecd565b9050610c086111e3565b60405180604001604052806040518060400160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152508152602001898152509050610c5c6111e3565b60405180604001604052806040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081526020018481525090506060600267ffffffffffffffff81118015610cc257600080fd5b50604051908082528060200260200182016040528015610cfc57816020015b610ce96111e3565b815260200190600190039081610ce15790505b5090508281600081518110610d0d57fe5b60200260200101819052508181600181518110610d2657fe5b6020026020010181905250610d396111fd565b604051806020016040528083815250905060008060009054906101000a900473ff","","50611d6482611e4e565b919050565b6000819050919050565b6000819050919050565b6000611d8882611d56565b9050919050565b6000611d9a82611d69565b9050919050565b6000611dac82611d69565b9050919050565b6000611dbe82611d69565b9050919050565b6000611dd082611d69565b9050919050565b6000611de282611d69565b9050919050565b6000611df482611d69565b9050919050565b82818337600083830152505050565b60005b83811015611e28578082015181840152602081019050611e0d565b83811115611e37576000848401525b50505050565b6000601f19601f8301169050919050565b60068110611e5857fe5b50565b611e6481611d69565b8114611e6f57600080fd5b50565b611e7b81611d73565b8114611e8657600080fd5b5056fea2646970667358221220c29c21a8f78bbb4b275fcd4104633dd6f53a65fe67f41f7b997bf60e9fa82ba964736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventEventResponse> getTransferEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from_account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to_account = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String from_account, String to_account, BigInteger amount,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] account;

        public BigInteger asset_value;

        public BigInteger ret;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] from_account;

        public byte[] to_account;

        public BigInteger amount;

        public BigInteger ret;
    }
}
